"""
Реализовать функцию, принимающую два числа (позиционные аргументы) и выполняющую их деление.
Числа запрашивать у пользователя, предусмотреть обработку ситуации деления на ноль.
"""


def division(val1, val2):
    try:
        print(val1 / val2)
    except ZeroDivisionError:
        print("Ошибка деления на 0")


division(4, 2)
division(5, 2)
division(45, 32)
division(10, 0)

"""
Выполнить функцию, которая принимает несколько параметров, 
описывающих данные пользователя: имя, фамилия, год рождения, город проживания, email, телефон. 
Функция должна принимать параметры как именованные аргументы. 
Осуществить вывод данных о пользователе одной строкой.
"""


def user(fName, lName, birthYear, city, email, phone):
    print(f"имя: {fName}, фамилия: {lName}, год рождения: {birthYear}, город проживания: {city}, email: {email}, телефон: {phone}")


# fName = input("Имя: ")
# lName = input("фамилия :")
# birthYear = input("год рождения :")
# city = input("город проживания :")
# email = input("email :")
# phone = input("телефон :")
#
# user(fName, lName, birthYear, city, email, phone)

"""
Реализовать функцию my_func(), которая принимает три позиционных аргумента 
и возвращает сумму наибольших двух аргументов.
"""


def my_func(val1, val2, val3):
    arr = [val1, val2, val3]
    valMax = max(arr)
    del arr[arr.index(valMax)]
    valSec = max(arr)
    return valSec + valMax


print(my_func(7, 8, 9))
print(my_func(43, 17, 22))

"""
Программа принимает действительное положительное число x 
и целое отрицательное число y. Выполните возведение числа x в степень y. 
Задание реализуйте в виде функции my_func(x, y). 
При решении задания нужно обойтись без встроенной функции возведения числа в степень.
Подсказка: попробуйте решить задачу двумя способами. 
Первый — возведение в степень с помощью оператора **. 
Второй — более сложная реализация без оператора **, предусматривающая использование цикла.
"""


def my_func_easy(x, y):
    return x ** y


def my_func_hard(x, y):
    if y == 0:
        return 1
    if x == 0:
        return "Ошибка деления на 0"
    res: float = 1
    step = float(1/x)
    for cycle in range(0, abs(y)):
        res *= step
    return res


# positive = int(input("Положительное: "))
# negative = int(input("Отрицательное: "))
positive = 2
negative = -5
print(my_func_easy(positive, negative))
print(my_func_hard(positive, negative))

"""
Программа запрашивает у пользователя строку чисел, разделённых пробелом. 
При нажатии Enter должна выводиться сумма чисел. Пользователь может продолжить ввод чисел, 
разделённых пробелом и снова нажать Enter. 
Сумма вновь введённых чисел будет добавляться к уже подсчитанной сумме.
Но если вместо числа вводится специальный символ, выполнение программы завершается. 
Если специальный символ введён после нескольких чисел, 
то вначале нужно добавить сумму этих чисел к полученной ранее сумме 
и после этого завершить программу.
"""

print("Введите разделённые пробелом числа, Enter для подсчёта их суммы, Ё для выхода")
string = input("Числа")

"""
Реализовать функцию int_func(), принимающую слова из маленьких латинских букв 
и возвращающую их же, но с прописной первой буквой. 
Например, print(int_func(‘text’)) -> Text.
"""


def int_func(val:str):
    return val.capitalize()


print(int_func("text"))

"""
Продолжить работу над заданием. 
В программу должна попадать строка из слов, разделённых пробелом. 
Каждое слово состоит из латинских букв в нижнем регистре. 
Нужно сделать вывод исходной строки, 
но каждое слово должно начинаться с заглавной буквы. 
Используйте написанную ранее функцию int_func().
"""

def int_func2(val: str):
    words = val.split()
    newlist = []
    for word in words:
        newlist.append(int_func(word))
    return ' '.join(newlist)


print(int_func2("fuck'n shit"))